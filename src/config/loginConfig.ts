import bowser from "bowser";

import {
  APPLE,
  APPLE_LOGIN_PROVIDER,
  AUTHENTICATOR_LOGIN_PROVIDER,
  DISCORD,
  DISCORD_LOGIN_PROVIDER,
  EMAIL_PASSWORDLESS_LOGIN_PROVIDER,
  FACEBOOK,
  FACEBOOK_LOGIN_PROVIDER,
  FARCASTER_LOGIN_PROVIDER,
  GITHUB,
  GITHUB_LOGIN_PROVIDER,
  GOOGLE,
  GOOGLE_LOGIN_PROVIDER,
  JWT,
  KAKAO_LOGIN_PROVIDER,
  LINE,
  LINE_LOGIN_PROVIDER,
  LINKEDIN,
  LINKEDIN_LOGIN_PROVIDER,
  PASSKEYS,
  PASSKEYS_LOGIN_PROVIDER,
  REDDIT,
  REDDIT_LOGIN_PROVIDER,
  SMS_PASSWORDLESS_LOGIN_PROVIDER,
  TWITCH,
  TWITCH_LOGIN_PROVIDER,
  TWITTER,
  TWITTER_LOGIN_PROVIDER,
  WECHAT_LOGIN_PROVIDER,
} from "../utils";
import browserInfo from "../utils/browserInfo";
import { BUILD_ENV_TYPE, LoginConfig, WEB3AUTH_NETWORK_TYPE } from "../utils/interfaces";
import configBuild from "./config-build";
import configEnv from "./config-env";

export const getLoginConfig = (environment: BUILD_ENV_TYPE, network: WEB3AUTH_NETWORK_TYPE) => {
  const currentConfigEnv = configEnv[network];
  const currentBuildEnv = configBuild[environment];
  if (!currentConfigEnv || !currentBuildEnv) {
    throw new Error("Invalid environment settings");
  }

  return {
    [GOOGLE_LOGIN_PROVIDER]: {
      loginProvider: GOOGLE_LOGIN_PROVIDER,
      verifier: currentConfigEnv.googleVerifier,
      typeOfLogin: GOOGLE,
      name: GOOGLE,
      description: "login.verifier-google-desc",
      clientId: currentConfigEnv.googleClientId,
      verifierSubIdentifier: currentConfigEnv.verifierSubIdentifier,
      logoHover: "",
      logoLight: "",
      logoDark: "",
      showOnModal: true,
      mainOption: true,
      showOnDesktop: true,
      showOnMobile: true,
      showOnSocialBackupFactor: true,
      // For torus only
      buttonDescription: "",
      walletVerifier: currentConfigEnv.walletGoogleVerifier,
      jwtParameters: {
        prompt: browserInfo.platform === bowser.PLATFORMS_MAP.desktop ? "select_account" : "consent select_account",
      },
    },
    [FACEBOOK_LOGIN_PROVIDER]: {
      loginProvider: FACEBOOK_LOGIN_PROVIDER,
      verifier: currentConfigEnv.facebookVerifier,
      description: "",
      typeOfLogin: FACEBOOK,
      name: FACEBOOK,
      clientId: currentConfigEnv.facebookClientId,
      verifierSubIdentifier: currentConfigEnv.verifierSubIdentifier,
      logoHover: "",
      logoLight: "",
      logoDark: "",
      showOnModal: true,
      mainOption: true,
      showOnDesktop: true,
      showOnMobile: true,
      showOnSocialBackupFactor: true,
      // For torus only
      buttonDescription: "",
      walletVerifier: currentConfigEnv.walletFacebookVerifier,
    },
    [TWITTER_LOGIN_PROVIDER]: {
      loginProvider: TWITTER_LOGIN_PROVIDER,
      verifier: currentConfigEnv.twitterVerifier,
      description: "",
      typeOfLogin: TWITTER,
      name: TWITTER,
      clientId: currentConfigEnv.twitterClientId,
      verifierSubIdentifier: currentConfigEnv.verifierSubIdentifier,
      logoHover: "",
      logoLight: "",
      logoDark: "",
      showOnModal: true,
      mainOption: true,
      showOnDesktop: true,
      showOnMobile: true,
      showOnSocialBackupFactor: true,
      jwtParameters: {
        domain: currentConfigEnv.loginDomain,
        connection: "twitter",
        isVerifierIdCaseSensitive: false,
      },
      // For torus only
      buttonDescription: "",
      walletVerifier: currentConfigEnv.walletTwitterVerifier,
    },
    [DISCORD_LOGIN_PROVIDER]: {
      loginProvider: DISCORD_LOGIN_PROVIDER,
      verifier: currentConfigEnv.discordVerifier,
      description: "",
      typeOfLogin: DISCORD,
      name: DISCORD,
      clientId: currentConfigEnv.discordClientId,
      verifierSubIdentifier: currentConfigEnv.verifierSubIdentifier,
      logoHover: "",
      logoLight: "",
      logoDark: "",
      showOnModal: true,
      mainOption: true,
      showOnDesktop: true,
      showOnMobile: true,
      showOnSocialBackupFactor: true,
      // For torus only
      buttonDescription: "",
      walletVerifier: currentConfigEnv.discordVerifier,
    },
    [LINE_LOGIN_PROVIDER]: {
      loginProvider: LINE_LOGIN_PROVIDER,
      verifier: currentConfigEnv.lineVerifier,
      description: "",
      typeOfLogin: LINE,
      name: "LINE",
      clientId: currentConfigEnv.lineClientId,
      verifierSubIdentifier: currentConfigEnv.verifierSubIdentifier,
      logoHover: "",
      logoLight: "",
      logoDark: "",
      mainOption: false,
      showOnModal: true,
      showOnDesktop: true,
      showOnMobile: true,
      showOnSocialBackupFactor: true,
      jwtParameters: {
        domain: currentConfigEnv.loginDomain,
        connection: "line",
        prompt: "consent",
      },
      // For torus only
      buttonDescription: "",
      walletVerifier: currentConfigEnv.walletLineVerifier,
    },
    [REDDIT_LOGIN_PROVIDER]: {
      loginProvider: REDDIT_LOGIN_PROVIDER,
      verifier: currentConfigEnv.redditVerifier,
      description: "",
      typeOfLogin: JWT,
      name: REDDIT,
      clientId: currentConfigEnv.redditClientId,
      verifierSubIdentifier: currentConfigEnv.verifierSubIdentifier,
      logoHover: "",
      logoLight: "",
      logoDark: "",
      mainOption: false,
      showOnModal: true,
      showOnDesktop: true,
      showOnMobile: true,
      showOnSocialBackupFactor: true,
      jwtParameters: {
        domain: currentConfigEnv.loginDomain,
        verifierIdField: "name",
        connection: "Reddit",
      },
      // For torus only
      buttonDescription: "",
      walletVerifier: currentConfigEnv.walletRedditVerifier,
    },
    [APPLE_LOGIN_PROVIDER]: {
      loginProvider: APPLE_LOGIN_PROVIDER,
      verifier: currentConfigEnv.appleVerifier,
      description: "",
      typeOfLogin: APPLE,
      name: APPLE,
      clientId: currentConfigEnv.appleClientId,
      verifierSubIdentifier: currentConfigEnv.verifierSubIdentifier,
      logoHover: "",
      logoLight: "",
      logoDark: "",
      mainOption: false,
      showOnModal: true,
      showOnDesktop: true,
      showOnMobile: true,
      showOnSocialBackupFactor: true,
      jwtParameters: {
        domain: currentConfigEnv.loginDomain,
        connection: "apple",
      },
      // For torus only
      buttonDescription: "",
      walletVerifier: currentConfigEnv.walletAppleVerifier,
    },
    [GITHUB_LOGIN_PROVIDER]: {
      loginProvider: GITHUB_LOGIN_PROVIDER,
      verifier: currentConfigEnv.githubVerifier,
      description: "",
      typeOfLogin: GITHUB,
      name: "GitHub",
      clientId: currentConfigEnv.githubClientId,
      verifierSubIdentifier: currentConfigEnv.verifierSubIdentifier,
      logoHover: "",
      logoLight: "",
      logoDark: "",
      mainOption: false,
      showOnModal: true,
      showOnDesktop: true,
      showOnMobile: true,
      showOnSocialBackupFactor: true,
      jwtParameters: {
        domain: currentConfigEnv.loginDomain,
        connection: "github",
        isVerifierIdCaseSensitive: false,
      },
      // For torus only
      buttonDescription: "",
      walletVerifier: currentConfigEnv.walletGithubVerifier,
    },
    [TWITCH_LOGIN_PROVIDER]: {
      loginProvider: TWITCH_LOGIN_PROVIDER,
      verifier: currentConfigEnv.twitchVerifier,
      description: "",
      typeOfLogin: TWITCH,
      name: TWITCH,
      clientId: currentConfigEnv.twitchClientId,
      verifierSubIdentifier: currentConfigEnv.verifierSubIdentifier,
      logoHover: "",
      logoLight: "",
      logoDark: "",
      mainOption: false,
      showOnModal: true,
      showOnDesktop: true,
      showOnMobile: true,
      showOnSocialBackupFactor: true,
      // For torus only
      buttonDescription: "",
      walletVerifier: currentConfigEnv.walletTwitchVerifier,
    },
    [LINKEDIN_LOGIN_PROVIDER]: {
      loginProvider: LINKEDIN_LOGIN_PROVIDER,
      verifier: currentConfigEnv.linkedinVerifier,
      description: "",
      typeOfLogin: LINKEDIN,
      name: "LinkedIn",
      clientId: currentConfigEnv.linkedinClientId,
      verifierSubIdentifier: currentConfigEnv.verifierSubIdentifier,
      logoHover: "",
      logoLight: "",
      logoDark: "",
      mainOption: false,
      showOnModal: true,
      showOnDesktop: true,
      showOnMobile: true,
      showOnSocialBackupFactor: true,
      jwtParameters: {
        domain: currentConfigEnv.loginDomain,
        connection: "linkedin",
      },
      // For torus only
      buttonDescription: "",
      walletVerifier: currentConfigEnv.walletLinkedinVerifier,
    },
    [WECHAT_LOGIN_PROVIDER]: {
      loginProvider: WECHAT_LOGIN_PROVIDER,
      verifier: currentConfigEnv.wechatVerifier,
      description: "",
      typeOfLogin: JWT,
      name: "WeChat",
      clientId: currentConfigEnv.wechatClientId,
      verifierSubIdentifier: currentConfigEnv.verifierSubIdentifier,
      logoHover: "",
      logoLight: "",
      logoDark: "",
      mainOption: false,
      showOnModal: true,
      showOnDesktop: true,
      showOnMobile: false,
      showOnSocialBackupFactor: true,
      jwtParameters: {
        domain: currentConfigEnv.loginDomain,
        connection: "Wechat",
      },
      // For torus only
      buttonDescription: "",
      walletVerifier: currentConfigEnv.walletWechatVerifier,
    },
    [KAKAO_LOGIN_PROVIDER]: {
      loginProvider: KAKAO_LOGIN_PROVIDER,
      verifier: currentConfigEnv.kakaoVerifier,
      description: "",
      typeOfLogin: JWT,
      name: "Kakao",
      clientId: currentConfigEnv.kakaoClientId,
      verifierSubIdentifier: currentConfigEnv.verifierSubIdentifier,
      logoHover: "",
      logoLight: "",
      logoDark: "",
      mainOption: false,
      showOnModal: true,
      showOnDesktop: true,
      showOnMobile: true,
      showOnSocialBackupFactor: true,
      jwtParameters: {
        domain: currentConfigEnv.loginDomain,
        connection: "Kakao",
      },
      // For torus only
      buttonDescription: "",
      walletVerifier: currentConfigEnv.walletKakaoVerifier,
    },
    [EMAIL_PASSWORDLESS_LOGIN_PROVIDER]: {
      loginProvider: EMAIL_PASSWORDLESS_LOGIN_PROVIDER,
      verifier: currentConfigEnv.hostedEmailPasswordlessVerifier,
      description: "login.verifier-email-desc",
      typeOfLogin: EMAIL_PASSWORDLESS_LOGIN_PROVIDER,
      name: "email",
      clientId: currentConfigEnv.hostedEmailPasswordlessClientId,
      verifierSubIdentifier: currentConfigEnv.verifierSubIdentifier,
      logoHover: "",
      logoLight: "",
      logoDark: "",
      mainOption: false,
      showOnModal: true,
      showOnDesktop: true,
      showOnMobile: true,
      showOnSocialBackupFactor: true,
      jwtParameters: {
        domain: currentBuildEnv.passwordlessHost,
        verifierIdField: "name",
        isVerifierIdCaseSensitive: false,
        flow_type: "code",
      },
      // For torus only
      buttonDescription: "Sign up/in with Email",
      walletVerifier: currentConfigEnv.walletHostedEmailPasswordlessVerifier,
    },
    [SMS_PASSWORDLESS_LOGIN_PROVIDER]: {
      loginProvider: SMS_PASSWORDLESS_LOGIN_PROVIDER,
      verifier: currentConfigEnv.hostedSmsPasswordlessVerifier,
      description: "login.verifier-sms-desc-2",
      typeOfLogin: SMS_PASSWORDLESS_LOGIN_PROVIDER,
      name: "mobile",
      clientId: currentConfigEnv.hostedSmsPasswordlessClientId,
      verifierSubIdentifier: currentConfigEnv.verifierSubIdentifier,
      logoHover: "",
      logoLight: "",
      logoDark: "",
      mainOption: false,
      showOnModal: true,
      showOnDesktop: true,
      showOnMobile: true,
      showOnSocialBackupFactor: true,
      jwtParameters: {
        domain: currentBuildEnv.passwordlessHost,
        verifierIdField: "name",
        isVerifierIdCaseSensitive: false,
      },

      // for torus only.
      buttonDescription: "Sign up/in with Mobile",
      walletVerifier: currentConfigEnv.walletHostedSmsPasswordlessVerifier,
    },
    [PASSKEYS_LOGIN_PROVIDER]: {
      loginProvider: PASSKEYS_LOGIN_PROVIDER,
      verifier: currentConfigEnv.passkeysVerifier,
      description: "login.verifier-webauth-desc",
      typeOfLogin: PASSKEYS,
      name: "passkey",
      clientId: currentConfigEnv.passkeysClientId,
      logoHover: "",
      logoLight: "",
      logoDark: "",
      mainOption: false,
      showOnModal: false,
      showOnDesktop: false,
      showOnMobile: false,
      showOnSocialBackupFactor: false,
      // For torus only
      buttonDescription: "",
      walletVerifier: "",
    },
    [FARCASTER_LOGIN_PROVIDER]: {
      loginProvider: FARCASTER_LOGIN_PROVIDER,
      verifier: currentConfigEnv.hostedFarcasterVerifier,
      description: "",
      typeOfLogin: JWT,
      name: "Farcaster",
      clientId: currentConfigEnv.hostedFarcasterClientId,
      verifierSubIdentifier: currentConfigEnv.verifierSubIdentifier,
      logoHover: "",
      logoLight: "",
      logoDark: "",
      mainOption: false,
      showOnModal: true,
      showOnDesktop: true,
      showOnMobile: true,
      showOnSocialBackupFactor: true,
      jwtParameters: {
        domain: currentConfigEnv.farcasterLoginDomain,
      },
      // For torus only
      buttonDescription: "",
      walletVerifier: "",
    },
    [AUTHENTICATOR_LOGIN_PROVIDER]: {
      loginProvider: AUTHENTICATOR_LOGIN_PROVIDER,
      verifier: currentConfigEnv.authenticatorVerifier,
      description: "",
      typeOfLogin: JWT,
      name: "Authenticator",
      clientId: currentConfigEnv.authenticatorClientId,
      verifierSubIdentifier: currentConfigEnv.verifierSubIdentifier,
      logoHover: "",
      logoLight: "",
      logoDark: "",
      mainOption: false,
      showOnModal: false,
      showOnDesktop: false,
      showOnMobile: false,
      showOnSocialBackupFactor: false,
      jwtParameters: {
        domain: currentBuildEnv.passwordlessHost,
        verifierIdField: "name",
        connection: "authenticator",
        isVerifierIdCaseSensitive: false,
        network,
      },
      // For torus only
      buttonDescription: "",
      walletVerifier: "",
    },
  } as LoginConfig;
};
