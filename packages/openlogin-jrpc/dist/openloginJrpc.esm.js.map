{"version":3,"file":"openloginJrpc.esm.js","sources":["../src/basePostMessageStream.ts","../src/safeEventEmitter.ts","../src/serializableError.ts","../src/jrpc.ts","../src/jrpcEngine.ts","../src/substream.ts","../src/mux.ts","../src/postMessageStream.ts"],"sourcesContent":["import { Duplex } from \"readable-stream\";\n\nfunction noop(): void {\n  return undefined;\n}\n\nconst SYN = \"SYN\";\nconst ACK = \"ACK\";\nconst BRK = \"BRK\";\n\nexport default class BasePostMessageStream extends Duplex {\n  _init: boolean;\n\n  _haveSyn: boolean;\n\n  _name: string;\n\n  _target: string;\n\n  _targetWindow: Window;\n\n  _targetOrigin: string;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  _onMessage: any;\n\n  _synIntervalId: number;\n\n  constructor({\n    name,\n    target,\n    targetWindow = window,\n    targetOrigin = \"*\",\n  }: {\n    name: string;\n    target: string;\n    targetWindow?: Window;\n    targetOrigin?: string;\n  }) {\n    super({\n      objectMode: true,\n    });\n    if (!name || !target) {\n      throw new Error(\"Invalid input.\");\n    }\n    this._init = false;\n    this._haveSyn = false;\n    this._name = name;\n    this._target = target; // target origin\n    this._targetWindow = targetWindow;\n    this._targetOrigin = targetOrigin;\n    this._onMessage = this.onMessage.bind(this);\n    this._synIntervalId = null;\n\n    window.addEventListener(\"message\", this._onMessage, false);\n    this._handShake();\n  }\n\n  _break(): void {\n    this.cork();\n    this._write(BRK, null, noop);\n    this._haveSyn = false;\n    this._init = false;\n  }\n\n  _handShake(): void {\n    this._write(SYN, null, noop);\n    this.cork();\n  }\n\n  _onData(data: unknown): void {\n    if (!this._init) {\n      // listen for handshake\n      if (data === SYN) {\n        this._haveSyn = true;\n        this._write(ACK, null, noop);\n      } else if (data === ACK) {\n        this._init = true;\n        if (!this._haveSyn) {\n          this._write(ACK, null, noop);\n        }\n        this.uncork();\n      }\n    } else if (data === BRK) {\n      this._break();\n    } else {\n      // forward message\n      try {\n        this.push(data);\n      } catch (err) {\n        this.emit(\"error\", err);\n      }\n    }\n  }\n\n  _postMessage(data: unknown): void {\n    const originConstraint = this._targetOrigin;\n    this._targetWindow.postMessage(\n      {\n        target: this._target,\n        data,\n      },\n      originConstraint\n    );\n  }\n\n  onMessage(event: MessageEvent): void {\n    const message = event.data;\n\n    // validate message\n    if (\n      (this._targetOrigin !== \"*\" && event.origin !== this._targetOrigin) ||\n      event.source !== this._targetWindow ||\n      typeof message !== \"object\" ||\n      message.target !== this._name ||\n      !message.data\n    ) {\n      return;\n    }\n\n    this._onData(message.data);\n  }\n\n  _read(): void {\n    return undefined;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  _write(data: unknown, _: any, cb: () => void): void {\n    this._postMessage(data);\n    cb();\n  }\n\n  _destroy(): void {\n    window.removeEventListener(\"message\", this._onMessage, false);\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { EventEmitter } from \"events\";\n\ntype Handler = (...args: any[]) => void;\ninterface EventMap {\n  [k: string]: Handler | Handler[] | undefined;\n}\n\nfunction safeApply<T, A extends any[]>(handler: (this: T, ...handlerArgs: A) => void, context: T, args: A): void {\n  try {\n    Reflect.apply(handler, context, args);\n  } catch (err) {\n    // Throw error after timeout so as not to interrupt the stack\n    setTimeout(() => {\n      throw err;\n    });\n  }\n}\n\nfunction arrayClone<T>(arr: T[]): T[] {\n  const n = arr.length;\n  const copy = new Array(n);\n  for (let i = 0; i < n; i += 1) {\n    copy[i] = arr[i];\n  }\n  return copy;\n}\n\nexport default class SafeEventEmitter extends EventEmitter {\n  emit(type: string, ...args: any[]): boolean {\n    let doError = type === \"error\";\n\n    const events: EventMap = (this as any)._events;\n    if (events !== undefined) {\n      doError = doError && events.error === undefined;\n    } else if (!doError) {\n      return false;\n    }\n\n    // If there is no 'error' event listener then throw.\n    if (doError) {\n      let er;\n      if (args.length > 0) {\n        [er] = args;\n      }\n      if (er instanceof Error) {\n        // Note: The comments on the `throw` lines are intentional, they show\n        // up in Node's output if this results in an unhandled exception.\n        throw er; // Unhandled 'error' event\n      }\n      // At least give some kind of context to the user\n      const err = new Error(`Unhandled error.${er ? ` (${er.message})` : \"\"}`);\n      (err as any).context = er;\n      throw err; // Unhandled 'error' event\n    }\n\n    const handler = events[type];\n\n    if (handler === undefined) {\n      return false;\n    }\n\n    if (typeof handler === \"function\") {\n      safeApply(handler, this, args);\n    } else {\n      const len = handler.length;\n      const listeners = arrayClone(handler);\n      for (let i = 0; i < len; i += 1) {\n        safeApply(listeners[i], this, args);\n      }\n    }\n\n    return true;\n  }\n}\n","import stringify from \"fast-safe-stringify\";\n\nexport default class SerializableError<T> extends Error {\n  public code: number;\n\n  public data: T;\n\n  constructor({ code, message, data }: { code: number; message: string; data?: T }) {\n    if (!Number.isInteger(code)) {\n      throw new Error(\"code must be an integer\");\n    }\n    if (!message || typeof message !== \"string\") {\n      throw new Error(\"message must be string\");\n    }\n\n    super(message);\n    this.code = code;\n    if (data !== undefined) {\n      this.data = data;\n    }\n  }\n\n  toString(): string {\n    return stringify({\n      code: this.code,\n      message: this.message,\n      data: this.data,\n      stack: this.stack,\n    });\n  }\n}\n","import { Duplex } from \"readable-stream\";\n\nimport { AsyncJRPCMiddleware, ConsoleLike, IdMap, JRPCMiddleware, JRPCRequest, JRPCResponse, Json, ReturnHandlerCallback } from \"./interfaces\";\nimport SafeEventEmitter from \"./safeEventEmitter\";\nimport SerializableError from \"./serializableError\";\n\nexport const getRpcPromiseCallback =\n  (resolve: (value?: unknown) => void, reject: (error?: Error) => void, unwrapResult = true) =>\n  (error: Error, response: JRPCResponse<unknown>): void => {\n    if (error || response.error) {\n      reject(error || response.error);\n    } else if (!unwrapResult || Array.isArray(response)) {\n      resolve(response);\n    } else {\n      resolve(response.result);\n    }\n  };\n\nexport function createErrorMiddleware(log: ConsoleLike): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next, end) => {\n    try {\n      // json-rpc-engine will terminate the request when it notices this error\n      if (typeof req.method !== \"string\" || !req.method) {\n        res.error = new SerializableError({ code: -32603, message: \"invalid method\" });\n        end();\n        return;\n      }\n      next((done) => {\n        const { error } = res;\n        if (!error) {\n          return done();\n        }\n        log.error(`OpenLogin - RPC Error: ${error.message}`, error);\n        return done();\n      });\n    } catch (error: unknown) {\n      log.error(`OpenLogin - RPC Error thrown: ${(error as Error).message}`, error);\n      res.error = new SerializableError({ code: -32603, message: (error as Error).message });\n      end();\n    }\n  };\n}\n\nexport function createStreamMiddleware(): { events: SafeEventEmitter; middleware: JRPCMiddleware<unknown, unknown>; stream: Duplex } {\n  const idMap: IdMap = {};\n\n  function readNoop() {\n    return false;\n  }\n\n  const events = new SafeEventEmitter();\n\n  function processResponse(res: JRPCResponse<unknown>) {\n    const context = idMap[res.id as unknown as string];\n    if (!context) {\n      throw new Error(`StreamMiddleware - Unknown response id \"${res.id}\"`);\n    }\n\n    delete idMap[res.id as unknown as string];\n    // copy whole res onto original res\n    Object.assign(context.res, res);\n    // run callback on empty stack,\n    // prevent internal stream-handler from catching errors\n    setTimeout(context.end);\n  }\n\n  function processNotification(res: JRPCRequest<unknown>) {\n    events.emit(\"notification\", res);\n  }\n\n  function processMessage(res: JRPCResponse<unknown>, _encoding: unknown, cb: (error?: Error | null) => void) {\n    let err: Error;\n    try {\n      const isNotification = !res.id;\n      if (isNotification) {\n        processNotification(res as unknown as JRPCRequest<unknown>);\n      } else {\n        processResponse(res);\n      }\n    } catch (_err: unknown) {\n      err = _err as Error;\n    }\n    // continue processing stream\n    cb(err);\n  }\n\n  const stream = new Duplex({\n    objectMode: true,\n    read: readNoop,\n    write: processMessage,\n  });\n\n  const middleware: JRPCMiddleware<unknown, unknown> = (req, res, next, end) => {\n    // write req to stream\n    stream.push(req);\n    // register request on id map\n    idMap[req.id as unknown as string] = { req, res, next, end };\n  };\n\n  return { events, middleware, stream };\n}\n\nexport type ScaffoldMiddlewareHandler<T, U> = JRPCMiddleware<T, U> | Json;\n\nexport function createScaffoldMiddleware(handlers: {\n  [methodName: string]: ScaffoldMiddlewareHandler<unknown, unknown>;\n}): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next, end) => {\n    const handler = handlers[req.method];\n    // if no handler, return\n    if (handler === undefined) {\n      return next();\n    }\n    // if handler is fn, call as middleware\n    if (typeof handler === \"function\") {\n      return handler(req, res, next, end);\n    }\n    // if handler is some other value, use as result\n    res.result = handler;\n    return end();\n  };\n}\n\nexport function createIdRemapMiddleware(): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next, _end) => {\n    const originalId = req.id;\n    const newId = Math.random().toString(36).slice(2);\n    req.id = newId;\n    res.id = newId;\n    next((done) => {\n      req.id = originalId;\n      res.id = originalId;\n      done();\n    });\n  };\n}\n\nexport function createLoggerMiddleware(logger: ConsoleLike): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next, _) => {\n    logger.debug(\"REQ\", req, \"RES\", res);\n    next();\n  };\n}\n\nexport function createAsyncMiddleware<T, U>(asyncMiddleware: AsyncJRPCMiddleware<T, U>): JRPCMiddleware<T, U> {\n  return async (req, res, next, end) => {\n    // nextPromise is the key to the implementation\n    // it is resolved by the return handler passed to the\n    // \"next\" function\n    let resolveNextPromise: () => void;\n    const nextPromise = new Promise<void>((resolve) => {\n      resolveNextPromise = resolve;\n    });\n\n    let returnHandlerCallback: unknown = null;\n    let nextWasCalled = false;\n\n    // This will be called by the consumer's async middleware.\n    const asyncNext = async () => {\n      nextWasCalled = true;\n\n      // We pass a return handler to next(). When it is called by the engine,\n      // the consumer's async middleware will resume executing.\n\n      next((runReturnHandlersCallback) => {\n        // This callback comes from JRPCEngine._runReturnHandlers\n        returnHandlerCallback = runReturnHandlersCallback;\n        resolveNextPromise();\n      });\n      await nextPromise;\n    };\n\n    try {\n      await asyncMiddleware(req, res, asyncNext);\n\n      if (nextWasCalled) {\n        await nextPromise; // we must wait until the return handler is called\n        (returnHandlerCallback as ReturnHandlerCallback)(null);\n      } else {\n        end(null);\n      }\n    } catch (err: unknown) {\n      const error = err as Error;\n      if (returnHandlerCallback) {\n        (returnHandlerCallback as ReturnHandlerCallback)(error);\n      } else {\n        end(error);\n      }\n    }\n  };\n}\n","import { rpcErrors, serializeError } from \"@metamask/rpc-errors\";\nimport { Duplex } from \"readable-stream\";\n\nimport {\n  JRPCEngineEndCallback,\n  JRPCEngineNextCallback,\n  JRPCEngineReturnHandler,\n  JRPCMiddleware,\n  JRPCRequest,\n  JRPCResponse,\n  Maybe,\n  RequestArguments,\n  SendCallBack,\n} from \"./interfaces\";\nimport SafeEventEmitter from \"./safeEventEmitter\";\nimport SerializableError from \"./serializableError\";\n\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\nexport class JRPCEngine extends SafeEventEmitter {\n  private _middleware: JRPCMiddleware<unknown, unknown>[];\n\n  constructor() {\n    super();\n    this._middleware = [];\n  }\n\n  /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */\n  private static async _runAllMiddleware(\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<unknown>,\n    middlewareStack: JRPCMiddleware<unknown, unknown>[]\n  ): Promise<\n    [\n      unknown, // error\n      boolean, // isComplete\n      JRPCEngineReturnHandler[],\n    ]\n  > {\n    const returnHandlers: JRPCEngineReturnHandler[] = [];\n    let error = null;\n    let isComplete = false;\n\n    // Go down stack of middleware, call and collect optional returnHandlers\n    for (const middleware of middlewareStack) {\n      [error, isComplete] = await JRPCEngine._runMiddleware(req, res, middleware, returnHandlers);\n      if (isComplete) {\n        break;\n      }\n    }\n    return [error, isComplete, returnHandlers.reverse()];\n  }\n\n  /**\n   * Runs an individual middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * and a boolean indicating whether the request should end.\n   */\n  private static _runMiddleware(\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<unknown>,\n    middleware: JRPCMiddleware<unknown, unknown>,\n    returnHandlers: JRPCEngineReturnHandler[]\n  ): Promise<[unknown, boolean]> {\n    return new Promise((resolve) => {\n      const end: JRPCEngineEndCallback = (err?: unknown) => {\n        const error = err || res.error;\n        if (error) {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          if ((globalThis as any).ReactNative) error.stack = \"ReactNative flag is set. Stack trace is not available.\";\n\n          res.error = serializeError(error, {\n            shouldIncludeStack: true,\n            fallbackError: {\n              message: error?.message || error?.toString(),\n              code: error?.code || -32603,\n              stack: error?.stack,\n              data: error?.data || error?.message || error?.toString(),\n            },\n          });\n        }\n        // True indicates that the request should end\n        resolve([error, true]);\n      };\n\n      const next: JRPCEngineNextCallback = (returnHandler?: JRPCEngineReturnHandler) => {\n        if (res.error) {\n          end(res.error);\n        } else {\n          if (returnHandler) {\n            if (typeof returnHandler !== \"function\") {\n              end(new SerializableError({ code: -32603, message: \"JRPCEngine: 'next' return handlers must be functions\" }));\n            }\n            returnHandlers.push(returnHandler);\n          }\n\n          // False indicates that the request should not end\n          resolve([null, false]);\n        }\n      };\n\n      try {\n        middleware(req, res, next, end);\n      } catch (error: unknown) {\n        end(error as Error);\n      }\n    });\n  }\n\n  /**\n   * Serially executes array of return handlers. The request and response are\n   * assumed to be in their scope.\n   */\n  private static async _runReturnHandlers(handlers: JRPCEngineReturnHandler[]): Promise<void> {\n    for (const handler of handlers) {\n      await new Promise<void>((resolve, reject) => {\n        handler((err) => (err ? reject(err) : resolve()));\n      });\n    }\n  }\n\n  /**\n   * Throws an error if the response has neither a result nor an error, or if\n   * the \"isComplete\" flag is falsy.\n   */\n  private static _checkForCompletion(_req: JRPCRequest<unknown>, res: JRPCResponse<unknown>, isComplete: boolean): void {\n    if (!(\"result\" in res) && !(\"error\" in res)) {\n      throw new SerializableError({ code: -32603, message: \"Response has no error or result for request\" });\n    }\n    if (!isComplete) {\n      throw new SerializableError({ code: -32603, message: \"Nothing ended request\" });\n    }\n  }\n\n  /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */\n  push<T, U>(middleware: JRPCMiddleware<T, U>): void {\n    this._middleware.push(middleware as JRPCMiddleware<unknown, unknown>);\n  }\n\n  /**\n   * Handle a JSON-RPC request, and return a response.\n   *\n   * @param request - The request to handle.\n   * @param callback - An error-first callback that will receive the response.\n   */\n  handle<T, U>(request: JRPCRequest<T>, callback: (error: unknown, response: JRPCResponse<U>) => void): void;\n\n  /**\n   * Handle an array of JSON-RPC requests, and return an array of responses.\n   *\n   * @param request - The requests to handle.\n   * @param callback - An error-first callback that will receive the array of\n   * responses.\n   */\n  handle<T, U>(requests: JRPCRequest<T>[], callback: (error: unknown, responses: JRPCResponse<U>[]) => void): void;\n\n  /**\n   * Handle a JSON-RPC request, and return a response.\n   *\n   * @param request - The request to handle.\n   * @returns A promise that resolves with the response, or rejects with an\n   * error.\n   */\n  handle<T, U>(request: JRPCRequest<T>): Promise<JRPCResponse<U>>;\n\n  /**\n   * Handle an array of JSON-RPC requests, and return an array of responses.\n   *\n   * @param request - The requests to handle.\n   * @returns A promise that resolves with the array of responses, or rejects\n   * with an error.\n   */\n  handle<T, U>(requests: JRPCRequest<T>[]): Promise<JRPCResponse<U>[]>;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  handle(req: unknown, cb?: any) {\n    if (cb && typeof cb !== \"function\") {\n      throw new Error('\"callback\" must be a function if provided.');\n    }\n\n    if (Array.isArray(req)) {\n      if (cb) {\n        return this._handleBatch(req, cb);\n      }\n      return this._handleBatch(req);\n    }\n\n    if (cb) {\n      return this._handle(req as JRPCRequest<unknown>, cb);\n    }\n    return this._promiseHandle(req as JRPCRequest<unknown>);\n  }\n\n  /**\n   * Returns this engine as a middleware function that can be pushed to other\n   * engines.\n   *\n   * @returns This engine as a middleware function.\n   */\n  asMiddleware(): JRPCMiddleware<unknown, unknown> {\n    return async (req, res, next, end) => {\n      try {\n        const [middlewareError, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n\n        if (isComplete) {\n          await JRPCEngine._runReturnHandlers(returnHandlers);\n          return end(middlewareError as Error);\n        }\n\n        return next(async (handlerCallback) => {\n          try {\n            await JRPCEngine._runReturnHandlers(returnHandlers);\n          } catch (error: unknown) {\n            return handlerCallback(error as Error);\n          }\n          return handlerCallback();\n        });\n      } catch (error: unknown) {\n        return end(error as Error);\n      }\n    };\n  }\n\n  /**\n   * Like _handle, but for batch requests.\n   */\n  private _handleBatch(reqs: JRPCRequest<unknown>[]): Promise<JRPCResponse<unknown>[]>;\n\n  /**\n   * Like _handle, but for batch requests.\n   */\n  private _handleBatch(reqs: JRPCRequest<unknown>[], cb: (error: unknown, responses?: JRPCResponse<unknown>[]) => void): Promise<void>;\n\n  private async _handleBatch(\n    reqs: JRPCRequest<unknown>[],\n    cb?: (error: unknown, responses?: JRPCResponse<unknown>[]) => void\n  ): Promise<JRPCResponse<unknown>[] | void> {\n    // The order here is important\n    try {\n      // 2. Wait for all requests to finish, or throw on some kind of fatal\n      // error\n      const responses = await Promise.all(\n        // 1. Begin executing each request in the order received\n        reqs.map(this._promiseHandle.bind(this))\n      );\n\n      // 3. Return batch response\n      if (cb) {\n        return cb(null, responses);\n      }\n      return responses;\n    } catch (error) {\n      if (cb) {\n        return cb(error);\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * A promise-wrapped _handle.\n   */\n  private _promiseHandle(req: JRPCRequest<unknown>): Promise<JRPCResponse<unknown>> {\n    return new Promise((resolve, reject) => {\n      this._handle(req, (_err, res) => {\n        // There will always be a response, and it will always have any error\n        // that is caught and propagated.\n        if (_err && res === undefined) {\n          reject(_err);\n        } else resolve(res);\n      }).catch(reject);\n    });\n  }\n\n  /**\n   * Ensures that the request object is valid, processes it, and passes any\n   * error and the response object to the given callback.\n   *\n   * Does not reject.\n   */\n  private async _handle(callerReq: JRPCRequest<unknown>, cb: (error: unknown, response: JRPCResponse<unknown>) => void): Promise<void> {\n    if (!callerReq || Array.isArray(callerReq) || typeof callerReq !== \"object\") {\n      const error = new SerializableError({ code: -32603, message: \"request must be plain object\" });\n      return cb(error, { id: undefined, jsonrpc: \"2.0\", error });\n    }\n\n    if (typeof callerReq.method !== \"string\") {\n      const error = new SerializableError({ code: -32603, message: \"method must be string\" });\n      return cb(error, { id: callerReq.id, jsonrpc: \"2.0\", error });\n    }\n\n    const req: JRPCRequest<unknown> = { ...callerReq };\n    const res: JRPCResponse<unknown> = {\n      id: req.id,\n      jsonrpc: req.jsonrpc,\n    };\n    let error: Error = null;\n\n    try {\n      await this._processRequest(req, res);\n    } catch (_error: unknown) {\n      // A request handler error, a re-thrown middleware error, or something\n      // unexpected.\n      error = _error as Error;\n    }\n\n    if (error) {\n      // Ensure no result is present on an errored response\n      delete res.result;\n      if (!res.error) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if ((globalThis as any).ReactNative) error.stack = \"ReactNative flag is set. Stack trace is not available.\";\n\n        res.error = serializeError(error, {\n          shouldIncludeStack: true,\n          fallbackError: {\n            message: error?.message || error?.toString(),\n            code: (error as { code?: number })?.code || -32603,\n            stack: error?.stack,\n            data: (error as { data?: string })?.data || error?.message || error?.toString(),\n          },\n        });\n      }\n    }\n\n    return cb(error, res as JRPCResponse<unknown>);\n  }\n\n  /**\n   * For the given request and response, runs all middleware and their return\n   * handlers, if any, and ensures that internal request processing semantics\n   * are satisfied.\n   */\n  private async _processRequest(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    const [error, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n\n    // Throw if \"end\" was not called, or if the response has neither a result\n    // nor an error.\n    JRPCEngine._checkForCompletion(req, res, isComplete);\n\n    // The return handlers should run even if an error was encountered during\n    // middleware processing.\n    await JRPCEngine._runReturnHandlers(returnHandlers);\n\n    // Now we re-throw the middleware processing error, if any, to catch it\n    // further up the call chain.\n    if (error) {\n      throw error;\n    }\n  }\n}\n\nexport function mergeMiddleware(middlewareStack: JRPCMiddleware<unknown, unknown>[]): JRPCMiddleware<unknown, unknown> {\n  const engine = new JRPCEngine();\n  middlewareStack.forEach((middleware) => engine.push(middleware));\n  return engine.asMiddleware();\n}\n\nexport interface EngineStreamOptions {\n  engine: JRPCEngine;\n}\n\nexport function createEngineStream(opts: EngineStreamOptions): Duplex {\n  if (!opts || !opts.engine) {\n    throw new Error(\"Missing engine parameter!\");\n  }\n\n  const { engine } = opts;\n  // eslint-disable-next-line prefer-const\n  let stream: Duplex;\n\n  function read(): undefined {\n    return undefined;\n  }\n\n  function write(req: JRPCRequest<unknown>, _encoding: unknown, cb: (error?: Error | null) => void) {\n    engine.handle(req, (_err, res) => {\n      stream.push(res);\n    });\n    cb();\n  }\n\n  stream = new Duplex({ objectMode: true, read, write });\n\n  // forward notifications\n  if (engine.on) {\n    engine.on(\"notification\", (message) => {\n      stream.push(message);\n    });\n  }\n  return stream;\n}\n\nexport interface SafeEventEmitterProvider extends SafeEventEmitter {\n  sendAsync: <T, U>(req: JRPCRequest<T>) => Promise<U>;\n  send: <T, U>(req: JRPCRequest<T>, callback: SendCallBack<JRPCResponse<U>>) => void;\n  request: <T, U>(args: RequestArguments<T>) => Promise<Maybe<U>>;\n}\n\nexport function providerFromEngine(engine: JRPCEngine): SafeEventEmitterProvider {\n  const provider: SafeEventEmitterProvider = new SafeEventEmitter() as SafeEventEmitterProvider;\n  // handle both rpc send methods\n  provider.sendAsync = async <T, U>(req: JRPCRequest<T>) => {\n    const res = await engine.handle(req);\n    if (res.error) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      if ((globalThis as any).ReactNative) res.error.stack = \"ReactNative flag is set. Stack trace is not available.\";\n\n      const err = serializeError(res.error, {\n        fallbackError: {\n          message: res.error?.message || res.error?.toString(),\n          code: res.error?.code || -32603,\n          stack: res.error?.stack,\n          data: res.error?.data || res.error?.message || res.error?.toString(),\n        },\n        shouldIncludeStack: true,\n      });\n\n      throw rpcErrors.internal(err);\n    }\n    return res.result as U;\n  };\n\n  provider.send = <T, U>(req: JRPCRequest<T>, callback: (error: unknown, providerRes: JRPCResponse<U>) => void) => {\n    if (typeof callback !== \"function\") {\n      throw new Error('Must provide callback to \"send\" method.');\n    }\n    engine.handle(req, callback);\n  };\n  // forward notifications\n  if (engine.on) {\n    engine.on(\"notification\", (message: string) => {\n      provider.emit(\"data\", null, message);\n    });\n  }\n\n  provider.request = async <T, U>(args: RequestArguments<T>) => {\n    const req: JRPCRequest<T> = {\n      ...args,\n      id: Math.random().toString(36).slice(2),\n      jsonrpc: \"2.0\",\n    };\n    const res = await provider.sendAsync(req);\n    return res as U;\n  };\n  return provider;\n}\n\nexport function providerFromMiddleware(middleware: JRPCMiddleware<string[], unknown>): SafeEventEmitterProvider {\n  const engine = new JRPCEngine();\n  engine.push(middleware);\n  const provider: SafeEventEmitterProvider = providerFromEngine(engine);\n  return provider;\n}\n\nexport function providerAsMiddleware(provider: SafeEventEmitterProvider): JRPCMiddleware<unknown, unknown> {\n  return async (req, res, _next, end) => {\n    // send request to provider\n    try {\n      const providerRes: unknown = await provider.sendAsync<unknown, unknown>(req);\n      res.result = providerRes;\n      return end();\n    } catch (error: unknown) {\n      return end(error as Error);\n    }\n  };\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Duplex } from \"readable-stream\";\n\nimport { BufferEncoding } from \"./interfaces\";\n\nexport default class Substream extends Duplex {\n  private readonly _parent: any;\n\n  private readonly _name: string;\n\n  constructor({ parent, name }: { parent: any; name: string }) {\n    super({ objectMode: true });\n    this._parent = parent;\n    this._name = name;\n  }\n\n  /**\n   * Explicitly sets read operations to a no-op.\n   */\n  _read(): void {\n    return undefined;\n  }\n\n  /**\n   * Called when data should be written to this writable stream.\n   *\n   * @param chunk - Arbitrary object to write\n   * @param encoding - Encoding to use when writing payload\n   * @param callback - Called when writing is complete or an error occurs\n   */\n  _write(chunk: unknown, _encoding: BufferEncoding, callback: (error?: Error | null) => void): void {\n    this._parent.push({\n      name: this._name,\n      data: chunk,\n    });\n    callback();\n  }\n}\n","import eos from \"end-of-stream\";\nimport once from \"once\";\nimport pump from \"pump\";\nimport { Duplex } from \"readable-stream\";\nimport type { Readable, Writable } from \"stream\";\n\nimport { BufferEncoding } from \"./interfaces\";\nimport Substream from \"./substream\";\n\nexport const IGNORE_SUBSTREAM = Symbol(\"IGNORE_SUBSTREAM\");\n\nexport type Stream = Readable | Writable;\n\ninterface Chunk {\n  name: string;\n  data: unknown;\n}\n\nexport class ObjectMultiplex extends Duplex {\n  public _substreams: Record<string, Substream | typeof IGNORE_SUBSTREAM>;\n\n  getStream: (name: string) => Substream | symbol;\n\n  constructor(opts: Record<string, unknown> = {}) {\n    super({\n      ...opts,\n      objectMode: true,\n    });\n    this._substreams = {};\n  }\n\n  createStream(name: string): Substream {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n\n    if (this._substreams[name]) {\n      throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n    }\n\n    // create substream\n    const substream = new Substream({ parent: this, name });\n    this._substreams[name] = substream;\n\n    // listen for parent stream to end\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    anyStreamEnd(this, (_error?: Error | null) => substream.destroy(_error || undefined));\n\n    return substream;\n  }\n\n  // ignore streams (dont display orphaned data warning)\n  ignoreStream(name: string): void {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n    if (this._substreams[name]) {\n      throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n    }\n    // set\n    this._substreams[name] = IGNORE_SUBSTREAM;\n  }\n\n  _read(): void {\n    return undefined;\n  }\n\n  _write(chunk: Chunk, _encoding: BufferEncoding, callback: (error?: Error | null) => void): void {\n    const { name, data } = chunk;\n\n    if (!name) {\n      window.console.warn(`ObjectMultiplex - malformed chunk without name \"${chunk}\"`);\n      return callback();\n    }\n\n    // get corresponding substream\n    const substream = this._substreams[name];\n    if (!substream) {\n      window.console.warn(`ObjectMultiplex - orphaned data for stream \"${name}\"`);\n      return callback();\n    }\n\n    // push data into substream\n    if (substream !== IGNORE_SUBSTREAM) {\n      substream.push(data);\n    }\n\n    return callback();\n  }\n}\n\n// util\nfunction anyStreamEnd(stream: ObjectMultiplex, _cb: (error?: Error | null) => void) {\n  const cb = once(_cb);\n  eos(stream as unknown as Stream, { readable: false }, cb);\n  eos(stream as unknown as Stream, { writable: false }, cb);\n}\n\nexport function setupMultiplex(stream: Duplex): ObjectMultiplex {\n  const mux = new ObjectMultiplex();\n  mux.getStream = function streamHelper(name: string) {\n    if (this._substreams[name]) {\n      return this._substreams[name];\n    }\n    return this.createStream(name);\n  };\n\n  pump(stream as unknown as Stream, mux as unknown as Stream, stream as unknown as Stream, (err) => {\n    if (err) window.console.error(err);\n  });\n  return mux;\n}\n","import BasePostMessageStream from \"./basePostMessageStream\";\n\nexport default class PostMessageStream extends BasePostMessageStream {\n  _postMessage(data: unknown): void {\n    let originConstraint = this._targetOrigin;\n    if (typeof data === \"object\") {\n      const dataObj = data as Record<string, unknown>;\n      if (typeof dataObj.data === \"object\") {\n        const dataObjData = dataObj.data as Record<string, unknown>;\n        if (Array.isArray(dataObjData.params) && dataObjData.params.length > 0) {\n          const dataObjDataParam = dataObjData.params[0] as Record<string, unknown>;\n          if (dataObjDataParam._origin) {\n            originConstraint = dataObjDataParam._origin as string;\n          }\n\n          // add a constraint for the response\n          dataObjDataParam._origin = window.location.origin;\n        }\n      }\n    }\n\n    this._targetWindow.postMessage(\n      {\n        target: this._target,\n        data,\n      },\n      originConstraint\n    );\n  }\n}\n"],"names":["noop","undefined","SYN","ACK","BRK","BasePostMessageStream","Duplex","constructor","_ref","name","target","targetWindow","window","targetOrigin","objectMode","_defineProperty","Error","_init","_haveSyn","_name","_target","_targetWindow","_targetOrigin","_onMessage","onMessage","bind","_synIntervalId","addEventListener","_handShake","_break","cork","_write","_onData","data","uncork","push","err","emit","_postMessage","originConstraint","postMessage","event","message","origin","source","_read","_","cb","_destroy","removeEventListener","safeApply","handler","context","args","Reflect","apply","setTimeout","arrayClone","arr","n","length","copy","Array","i","SafeEventEmitter","EventEmitter","type","doError","events","_events","error","_len","arguments","_key","er","len","listeners","SerializableError","code","Number","isInteger","toString","stringify","stack","getRpcPromiseCallback","resolve","reject","unwrapResult","response","isArray","result","createErrorMiddleware","log","req","res","next","end","method","done","createStreamMiddleware","idMap","readNoop","processResponse","id","Object","assign","processNotification","processMessage","_encoding","isNotification","_err","stream","read","write","middleware","createScaffoldMiddleware","handlers","createIdRemapMiddleware","_end","originalId","newId","Math","random","slice","createLoggerMiddleware","logger","debug","createAsyncMiddleware","asyncMiddleware","resolveNextPromise","nextPromise","Promise","returnHandlerCallback","nextWasCalled","asyncNext","runReturnHandlersCallback","JRPCEngine","_middleware","_runAllMiddleware","middlewareStack","returnHandlers","isComplete","_runMiddleware","reverse","globalThis","ReactNative","serializeError","shouldIncludeStack","fallbackError","returnHandler","_runReturnHandlers","_checkForCompletion","_req","handle","_handleBatch","_handle","_promiseHandle","asMiddleware","middlewareError","handlerCallback","reqs","responses","all","map","catch","callerReq","jsonrpc","_objectSpread","_processRequest","_error","_error2","_error3","_error4","_error5","_error6","_error7","_error8","mergeMiddleware","engine","forEach","createEngineStream","opts","on","providerFromEngine","provider","sendAsync","_res$error","_res$error2","_res$error3","_res$error4","_res$error5","_res$error6","_res$error7","rpcErrors","internal","send","callback","request","providerFromMiddleware","providerAsMiddleware","_next","providerRes","Substream","parent","_parent","chunk","IGNORE_SUBSTREAM","Symbol","ObjectMultiplex","_substreams","createStream","substream","anyStreamEnd","destroy","ignoreStream","console","warn","_cb","once","eos","readable","writable","setupMultiplex","mux","getStream","streamHelper","pump","PostMessageStream","dataObj","dataObjData","params","dataObjDataParam","_origin","location"],"mappings":"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"}